<?php

/**
 * This is the model base class for the table "tasks_to_user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "TasksToUser".
 *
 * Columns in table "tasks_to_user" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $video_link
 * @property string $title_t
 * @property string $text
 * @property integer $price
 * @property string $update_time
 * @property integer $create_time
 * @property integer $user_id
 *
 */
abstract class BaseTasksToUser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tasks_to_user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'TasksToUser|TasksToUsers', $n);
	}

	public static function representingColumn() {
		return 'text';
	}

	public function rules() {
		return array(
			array('text, price, task_id', 'required'),
			array('price, create_time,update_time, user_id, task_id, likes', 'numerical', 'integerOnly'=>true),
			array('video_link', 'length', 'max'=>255),
			array('video_link', 'youtubeCkecker'),
			array('video_link,, update_time', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, video_link, text, price, update_time, create_time, user_id', 'safe', 'on'=>'search'),
		);
	}


	

	public function pivotModels() {
		return array(
		);
	}

	public function getFather(){
		if($this->task_id!=0)  // isnt root?
        {

            $model = Tasks::model()->findByPk($this->task_id);
            return $model;
        }
        return null;
	}

	public function getUser(){
		if($this->user_id!=0)  // isnt root?
        {

            $model = User::model()->findByPk($this->user_id);
            return $model;
        }
        return null;
	}

	public function isVoted()
	{
		if(TasksToUserLikes::model()->findByAttributes(array('tasks_to_user_id' => $this->id, 'user_id' => Yii::app()->user->id))){
			return true;
		}

		return false;
	}

	public function youtubeCkecker($attribute, $params){

		if($this->$attribute != null && strlen($this->$attribute) != 11){
			$url = parse_url($this->$attribute);
			if($url['path'] != 'youtube.com' || $url['path'] != 'www.youtube.com'){
				if($url['path'] != "/watch")
					$this->addError($attribute, 'Не верный формат ссылки (Пример ссылки: https://www.youtube.com/watch?v=jECF4_MEfc8)');
			}
		}
	}

	public function beforeSave(){
		if(Yii::app()->user->id){

			if($this->isNewRecord){
				$this->create_time = time();
			}

			$this->user_id = Yii::app()->user->id;
			$this->update_time = time();


			if(strlen($this->video_link) != 11){
				$url = $this->video_link;
				parse_str( parse_url( $url, PHP_URL_QUERY ), $video_params );
				$this->video_link = $video_params['v'];
			}

			return true;
		}
		
		return false;
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'video_link' => Yii::t('app', 'Video Link'),
			'title_t' => Yii::t('app', 'Title T'),
			'text' => Yii::t('app', 'Text'),
			'price' => Yii::t('app', 'Price'),
			'update_time' => Yii::t('app', 'Update Time'),
			'create_time' => Yii::t('app', 'Create Time'),
			'user_id' => Yii::t('app', 'User'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('video_link', $this->video_link, true);
		$criteria->compare('title_t', $this->title_t, true);
		$criteria->compare('text', $this->text, true);
		$criteria->compare('price', $this->price);
		$criteria->compare('update_time', $this->update_time, true);
		$criteria->compare('create_time', $this->create_time);
		$criteria->compare('user_id', $this->user_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}