<?php

/**
 * This is the model base class for the table "tasks".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Tasks".
 *
 * Columns in table "tasks" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $title
 * @property string $title_t
 * @property string $text
 * @property string $update_time
 * @property integer $create_time
 * @property integer $likes
 * @property integer $user_id
 *
 */
Yii::import('begemot.extensions.contentKit.ContentKitModel');

abstract class BaseTasks extends ContentKitModel {
	public $image = null;
	public $imagePath = null;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tasks';
	}

	public function behaviors(){
		$behaviors = array(
            'slug' => array(
                'class' => 'begemot.extensions.SlugBehavior',
            ),
        );

        return array_merge($behaviors, parent::behaviors());
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Tasks|Tasks', $n);
	}

	public static function representingColumn() {
		return 'text';
	}

	public function rules() {
		return array(
			array('title, likes, text', 'required'),
			array('likes, user_id', 'numerical', 'integerOnly'=>true),
			array('title, title_t', 'length', 'max'=>255),
			array('id, title, title_t, text, update_time, create_time, likes, user_id', 'safe', 'on'=>'search'),
			array('image', 'checkImage'),
		);
	}

	public function checkImage($attribute,$params)
	{
		if($this->$attribute != null){
			$image = htmlentities($this->$attribute);

			if (isset($_POST['cords_w']) && isset($_POST['cords_h']) && isset($_POST['cords_x1']) && isset($_POST['cords_y1'])) {
		
				try {
					// pixel cache max size
					IMagick::setResourceLimit(imagick::RESOURCETYPE_MEMORY, 64);
					// maximum amount of memory map to allocate for the pixel cache
					IMagick::setResourceLimit(imagick::RESOURCETYPE_MAP, 64);

					$image = new Imagick($image);
					$randId = rand(10000, 1000000);
					$this->imagePath = Yii::app()->basePath . '/../files/temp/' . $randId .  "-" . Yii::app()->user->id . "." . $image->getImageFormat();
					if (isset($_POST['cords_w']) && isset($_POST['cords_h']) && isset($_POST['cords_x1']) && isset($_POST['cords_y1'])) {
						$image->cropImage( intval($_POST['cords_w']),  intval($_POST['cords_h']),  intval($_POST['cords_x1']),  intval($_POST['cords_y1']));
					}
					
					$image->writeImage($this->imagePath);
					$image->clear();
					$image->destroy();

					

				}
				catch(Exception $e){
					$this->addError("image","Произошла ошибка обработки изображений" . $e);
				}
			}
			else{
				$this->imagePath = $this->$attribute;
			}
		}

	}

	public function afterSave(){
		if($this->imagePath == null && $this->image != ""){
			$this->imagePath = $this->image;
		}
		if($this->imagePath != null){
			Yii::import('application.modules.pictureBox.components.PictureBox');

			$pictureBoxController = new PictureBox();
			$pictureBoxController->actionUploadOnlyOneImage('tasks', $this->id, $this->imagePath);
			return true;
		}
		else return false;
	}

	public function beforeSave(){
		if(Yii::app()->user->id){

			if($this->isNewRecord){
				$this->create_time = time();
			}

			$this->user_id = Yii::app()->user->id;
			$this->title_t = $this->mb_transliterate($this->title);
			$this->update_time = time();

			return true;
		}
		
		return false;
  	}
       

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'title' => 'Заголовок',
			'title_t' => Yii::t('app', 'Title T'),
			'text' => 'Описание',
			'update_time' => Yii::t('app', 'Update Time'),
			'create_time' => Yii::t('app', 'Create Time'),
			'likes' => Yii::t('app', 'Likes'),
			'user_id' => Yii::t('app', 'User'),
		);
	}

	//get path of one main picture, wich take from fav or common images list
    public function getItemMainPicture($tag = null)
    {

            Yii::import("pictureBox.components.PBox");
            $PBox = new PBox("catalogItem", $this->id);
            $image = $PBox->getFirstImage($tag);
            return $image;

        $imagesDataPath = Yii::getPathOfAlias('webroot') . '/files/pictureBox/catalogItem/' . $this->id;
        $favFilePath = $imagesDataPath . '/favData.php';

        $images = array();
        $itemImage = '';

        $images = $this->getItemFavPictures();
        if (count($images) != 0) {
            $imagesArray = array_values($images);
            $itemImage = $imagesArray[0];
        }
        if (count($images) == 0) {

            $images = $this->getItemPictures();
            if (count($images) > 0) {
                $imagesArray = array_values($images);
                $itemImage = $imagesArray[0];
            } else {
                return '#';
            }

        }

        if (is_null($tag)) {
            return array_shift($itemImage);
        } else {
            if (isset($itemImage[$tag]))
                return $itemImage[$tag];
            else
                return '#';
        }
    }

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('title_t', $this->title_t, true);
		$criteria->compare('text', $this->text, true);
		$criteria->compare('update_time', $this->update_time, true);
		$criteria->compare('create_time', $this->create_time);
		$criteria->compare('likes', $this->likes);
		$criteria->compare('user_id', $this->user_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}